# Toolchain
CC  = @arm-none-eabi-gcc
HEX = @arm-none-eabi-objcopy
SZ  = @arm-none-eabi-size

RM=rm -rf

# Global Variables
DEBUG ?= 0 # Default to non debug
BIN_DIR_NAME = Bin

ELF_FILE_NAME = $(BOARD_NAME).elf
BIN_FILE_NAME = $(BOARD_NAME).bin
MAP_FILE_NAME = $(BOARD_NAME).map

ifeq ($(DEBUG), 1)
BIN_DIR = $(BIN_DIR_NAME)/$(BOARD_NAME)/Debug
else
BIN_DIR = $(BIN_DIR_NAME)/$(BOARD_NAME)/Release
endif

BIN_FILE = $(BIN_DIR)/$(BIN_FILE_NAME)
ELF_FILE = $(BIN_DIR)/$(ELF_FILE_NAME)
MAP_FILE = $(BIN_DIR)/$(MAP_FILE_NAME)

SRC_DIR = $(BUILD_TARGET)/Src
COMMON_LIB_DIR = common/



CURRENT_DATE = \"$(shell date +%F_%T%Z)\"
CURRENT_TOP_BRANCH = \"$(shell git rev-parse --abbrev-ref HEAD)\"
CURRENT_HASH = \"$(shell git rev-parse HEAD)\"


COLORS_ENABLED ?= 1
ifeq ($(COLORS_ENABLED), 1)
GREEN_COLOR = "\\033[92m"
BLUE_COLOR = "\\033[34m"
RED_COLOR = "\\033[91m"
NO_COLOR = "\\033[0m"
endif


# Include STM32CubeMX autogenerated Makefile
include $(CUBE_MAKEFILE_PATH)/Cube-Lib.mk

DEPDIR_BASE := .d
DEPDIR := $(DEPDIR_BASE)/$(BOARD_NAME)
$(shell mkdir -p $(DEPDIR) >/dev/null)
DEPFLAGS = -MT $@ -MMD -MP -MF $(BOARD_DEPDIR)/$*.Td

# Setup includes: flags, dirs
INCLUDE_DIRS = $(COMMON_LIB_DIR)/Inc $(BUILD_TARGET)/Inc


INCLUDE_FLAGS := $(addprefix -I,$(INCLUDE_DIRS))
# add in driver dirs
INCLUDE_FLAGS += $(LIB_C_INCLUDES)
INCLUDE_FLAGS += $(LIB_AS_INCLUDES)

# Setup System defines
DEFINES := "STM32F446xx"

DEFINES += BOARD_NAME=$(BOARD_NAME) BOARD_NAME_UPPER=$(BOARD_NAME_UPPER) BOARD_ID=ID_$(BOARD_NAME_UPPER) BOARD_TYPE=$(BOARD_ARCHITECTURE) BOARD_TYPE_$(BOARD_ARCHITECTURE)=1 "USE_HAL_DRIVER"
DEFINE_FLAGS := $(addprefix -D,$(DEFINES))

# Setup Linker Flags
LINKER_FLAGS =$(LIB_LDFLAGS)
LINKER_FLAGS += -Wl,-Map=$(MAP_FILE),--cref
LINKER_FLAGS += -u_printf_float -u_scanf_float
LINKER_FLAGS += -Wl,--undefined=uxTopUsedPriority
LINKER_FLAGS += -z muldefs

# Assembler Flags
ASSEMBLER_FLAGS = -x assembler-with-cpp $(LIB_ASFLAGS)

NOTES ?= "N/A"
# Compiler Flags
COMPILER_FLAGS = $(LIB_CFLAGS)
COMPILER_FLAGS += $(DEFINE_FLAGS) -Werror -Wno-format-truncation
COMPILER_FLAGS += -D CUR_DATE=$(CURRENT_DATE)
COMPILER_FLAGS += -D CUR_TOP_BRANCH=$(CURRENT_TOP_BRANCH)
COMPILER_FLAGS += -D CUR_HASH=$(CURRENT_HASH)
COMPILER_FLAGS += -D RELEASE_NOTES=\"$(NOTES)\"
ifeq ($(DEBUG), 1)
COMPILER_FLAGS += -g -Og
else
COMPILER_FLAGS += -g -O3 -Ofast
endif

POSTCOMPILE = @mv -f $(BOARD_DEPDIR)/$*.Td $(BOARD_DEPDIR)/$*.d && touch $@


# Setup Src *.c, *.asm files to build
SRC = $(wildcard $(SRC_DIR)/*.c) \
	   $(addprefix $(COMMON_LIB_DIR)/Src/, $(COMMON_LIB_SRC)) \
	   $(LIB_C_SOURCES)

SRCASM = $(LIB_ASM_SOURCES)

# Board Build

ifneq ($(BOARD_NAME), $(BUILD_TARGET))
$(BUILD_TARGET): $(BOARD_NAME)
endif

$(BOARD_NAME): BOARD_COMPILER_FLAGS := $(COMPILER_FLAGS)
$(BOARD_NAME): BOARD_INCLUDE_FLAGS := $(INCLUDE_FLAGS)
$(BOARD_NAME): BOARD_ASSEMBLER_FLAGS := $(ASSEMBLER_FLAGS)
$(BOARD_NAME): BOARD_POSTCOMPILE = $(POSTCOMPILE)
$(BOARD_NAME): BOARD_LINKER_FLAGS := $(LINKER_FLAGS)
$(BOARD_NAME): BOARD_DEPDIR := $(DEPDIR)
$(BOARD_NAME): CURR_BOARD := $(BOARD_NAME)

$(BOARD_NAME): BOARD_BIN_FILE := $(BIN_FILE)

$(BOARD_NAME): $(BOARD_NAME)_pre-build $(BIN_FILE)
	@echo -e "$(GREEN_COLOR)Completed Build $(CURR_BOARD) $(NO_COLOR)"

RELEASE_OBJS = $(SRC:%.c=$(BIN_DIR)/%.o) $(SRCASM:%.s=$(BIN_DIR)/%.o)

$(BIN_FILE): $(ELF_FILE)
	$(HEX) -O binary "$<" "$@"

$(ELF_FILE): $(RELEASE_OBJS)
	$(CC) $^ $(BOARD_LINKER_FLAGS) -o $@
	$(SZ) $@


# Build each object file
$(BIN_DIR)/%.o: %.c
	@mkdir -p $(dir $@)
	@mkdir -p $(dir $(BOARD_DEPDIR)/$^)
	$(CC) $(BOARD_COMPILER_FLAGS) $(BOARD_INCLUDE_FLAGS) $(DEPFLAGS) $< -o $@
	$(BOARD_POSTCOMPILE)

$(BIN_DIR)/%.o: %.s
	@mkdir -p $(dir $@)
	$(CC) $(BOARD_ASSEMBLER_FLAGS) $(BOARD_INCLUDE_FLAGS) $< -o $@

$(BIN_DIR)/%.o: %.S
	@mkdir -p $(dir $@)
	$(CC) $(BOARD_ASSEMBLER_FLAGS) $(BOARD_INCLUDE_FLAGS) $< -o $@

######################################
# Created autogenerated files
#######################################

#$(DEPDIR)/%.d: ;
.PRECIOUS: $(DEPDIR)/%.d

$(BOARD_NAME)_pre-build:
	@echo -e "$(BLUE_COLOR)Building Board: $(RED_COLOR)$(CURR_BOARD) $(NO_COLOR)"

ifndef BUILD_ONLY_ONCE

clean:
	$(RM) $(BIN_DIR_NAME)
	$(RM) $(DEPDIR_BASE)

#
# Initialization 
#

BUILD_ONLY_ONCE = 1

endif

LOAD_BIN_FILE := $(BIN_FILE)
LOAD_ELF_FILE := $(ELF_FILE)


#
# Include dependencies
#
include $(wildcard $(patsubst %,$(DEPDIR)/%.d, $(basename $(SRC))))
